name: commit

on: [ push ]

jobs:
  # --------------------------------------------------------------------------------
  # Test stage
  # --------------------------------------------------------------------------------
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: install dependencies
        run: npm ci
      - name: run lint
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: install dependencies
        run: npm ci
      - name: run tests
        run: npm run test

  # --------------------------------------------------------------------------------
  # Build stage
  # --------------------------------------------------------------------------------
  build-webapp:
    runs-on: ubuntu-latest
    needs: [ lint, test ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: install dependencies
        run: npm ci
      - name: build the application
        run: npm run build

  build-docker:
    runs-on: ubuntu-latest
    needs: [ build-webapp ]
    env:
      PORT: 8080
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - name: build the docker image
        run: docker build .

  build-npm:
    runs-on: ubuntu-latest
    needs: [ build-webapp ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: install dependencies
        run: npm ci
      - name: build the npm package
        run: npm run registry:compile

  # --------------------------------------------------------------------------------
  # Publish stage
  # --------------------------------------------------------------------------------
  auto-tag:
    runs-on: ubuntu-latest
    needs: [ build-npm ]
    if: github.ref == 'refs/heads/master' && success()
    permissions:
      contents: write
    outputs:
      updated: ${{ steps.compare_versions.outputs.compare }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: get package.json version
        id: get_version
        run: |
          echo "version=v$(node -p "require('./package.json').version")" >> "$GITHUB_OUTPUT"
          echo "got package.json version: v$(node -p "require('./package.json').version")"
      - name: get latest tag
        id: get_latest_tag
        run: |
          npm i semver
          echo "tag=$(git describe --tags `git rev-list --tags --max-count=1`)" >> "$GITHUB_OUTPUT"
          echo "got git version: $(git describe --tags `git rev-list --tags --max-count=1`)"
      - name: compare package.json version with latest tag
        id: compare_versions
        run: echo "compare=$(node -p "require('semver').gt('${{ steps.get_version.outputs.version }}', '${{ steps.get_latest_tag.outputs.tag }}')")" >> "$GITHUB_OUTPUT"
      - name: create tag
        if: steps.compare_versions.outputs.compare == 'true'
        run: git tag ${{ steps.get_version.outputs.version }}
      - name: push tag
        if: steps.compare_versions.outputs.compare == 'true'
        run: git push origin ${{ steps.get_version.outputs.version }}

  publish-npm:
    runs-on: ubuntu-latest
    needs: [ auto-tag ]
    if: success() && needs.auto-tag.outputs.updated == 'true'
    environment: npm
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
      - name: install dependencies
        run: npm ci
      - name: publish the package on npm
        run: npm run registry:publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-github:
    runs-on: ubuntu-latest
    needs: [ auto-tag ]
    if: success() && needs.auto-tag.outputs.updated == 'true'
    environment: 'github packages'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          scope: "@anovel"
          registry-url: 'https://npm.pkg.github.com'
      - name: install dependencies
        run: npm ci
      - name: build package
        run: npm run registry:compile
      - run: |
          echo "@anovel:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> .npmrc
      - name: publish the package on github
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # --------------------------------------------------------------------------------
  # Deploy stage
  # --------------------------------------------------------------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: [ build-docker ]
    if: github.ref == 'refs/heads/master' && success()
    environment: production
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
      - id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: uikit-frontend
          region: europe-west9
          project_id: ${{ secrets.PROJECT_ID }}
          source: ./
          flags: '--concurrency=100 --timeout=60 --min-instances=1 --max-instances=10 --memory=512Mi --cpu=1 --platform=managed --allow-unauthenticated'
      - name: show output
        run: echo ${{ steps.deploy.outputs.url }}
